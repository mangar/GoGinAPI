// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package dbsqlc

import (
	"context"
)

const getAllLogs = `-- name: GetAllLogs :many
SELECT id, mensagem FROM Logs
`

func (q *Queries) GetAllLogs(ctx context.Context) ([]Log, error) {
	rows, err := q.db.QueryContext(ctx, getAllLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(&i.ID, &i.Mensagem); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastLog = `-- name: GetLastLog :one
SELECT id, mensagem FROM Logs
WHERE id = (SELECT MAX(id) FROM Logs)
`

func (q *Queries) GetLastLog(ctx context.Context) (Log, error) {
	row := q.db.QueryRowContext(ctx, getLastLog)
	var i Log
	err := row.Scan(&i.ID, &i.Mensagem)
	return i, err
}

const insertLog = `-- name: InsertLog :exec
INSERT INTO Logs ( mensagem )
VALUES ($1)
`

func (q *Queries) InsertLog(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, insertLog)
	return err
}
